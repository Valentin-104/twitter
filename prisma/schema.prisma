// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @map("_id")
  username     String     @unique
  name         String
  bio          String?
  profileImage String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  followingIds String[]   @default([])
  hasActivity  Boolean    @default(false)
  posts        Post[]
  replies      Reply[]
  actiivities  Activity[]
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likedIds  String[] @default([])
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  replies   Reply[]
}

model Reply {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String   @db.ObjectId
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Activity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  username  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [username], references: [username], onDelete: Cascade)
}
